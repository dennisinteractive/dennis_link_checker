<?php
/**
 * @file
 * dennis_link_checker.module
 */

use Dennis\Link\Checker\Config;
use Dennis\Link\Checker\Logger;
use Dennis\Link\Checker\LinkLocalisation;
use Dennis\Link\Checker\Processor;
use Dennis\Link\Checker\EntityHandler;
use Dennis\Link\Checker\Analyzer;
use Dennis\Link\Checker\Throttler;
use Dennis\Link\Checker\Database;
use Dennis\Link\Checker\Queue;

/**
 * PSR-4 autoloader
 * files[] in .info doesn't find them.
 */
spl_autoload_register(function ($class) {
  if (strpos($class, 'Dennis\Link\Checker') === 0) {
    if (file_exists((__DIR__ . '/src/' . str_replace('\\', '/', $class) . '.php'))) {
      include(__DIR__ . '/src/' . str_replace('\\', '/', $class) . '.php');
    }
  }
});

/**
 * Include constants.
 */
require_once 'dennis_link_checker.constants.inc';

/**
 * Include the API functions.
 */
require_once 'dennis_link_checker.api.inc';

/**
 * Implements hook_permission().
 */
function dennis_link_checker_permission() {
  $return = [];

  $return[DENNIS_LINK_CHECKER_PERMISSION_ACCESS_LINK_CHECKER_OVERVIEW] = [
    'title' => DENNIS_LINK_CHECKER_PERMISSION_ACCESS_LINK_CHECKER_OVERVIEW_LABEL,
  ];

  $return[DENNIS_LINK_CHECKER_PERMISSION_CONFIGURE_LINK_CHECKER] = [
    'title' => DENNIS_LINK_CHECKER_PERMISSION_CONFIGURE_LINK_CHECKER_LABEL,
  ];

  $return[DENNIS_LINK_CHECKER_PERMISSION_RUN_LINK_CHECKER] = [
    'title' => DENNIS_LINK_CHECKER_PERMISSION_RUN_LINK_CHECKER_LABEL,
  ];

  return $return;
}

/**
 * Implements hook_cron().
 */
function dennis_link_checker_cron() {
  // Run the link checker if enough time has passed since the last run
  // completed, or if we've skipped enough runs that it's time to force a run.
  // I hate being forced to run...

  // Find out when the last run completed.
  $last_run_timestamp = variable_get(DENNIS_LINK_CHECKER_VARIABLE_LAST_COMPLETED_TIME, DENNIS_LINK_CHECKER_LAST_COMPLETED_TIME_DEFAULT);
  $last_run_time = format_date($last_run_timestamp, 'medium');

  // Get the time interval between runs.
  $run_interval = variable_get(DENNIS_LINK_CHECKER_VARIABLE_RUN_INTERVAL, DENNIS_LINK_CHECKER_RUN_INTERVAL_DEFAULT);

  // Work out when the next run is due.
  $next_run_timestamp = $last_run_timestamp + $run_interval;
  $next_run_time = format_date($next_run_timestamp, 'medium');

  // If the last run was completed fewer than
  // DENNIS_LINK_CHECKER_VARIABLE_RUN_INTERVAL seconds ago, it's definitely not
  // time to re-run, so return.
  if (($next_run_timestamp) > REQUEST_TIME) {
    // Next run is in the future.
    watchdog(DENNIS_LINK_CHECKER_MODULE_NAME, 'Cron: not running link checker as next scheduled run is in the future, at @next_run_time. Last run was at @last_run_time.', [
      '@next_run_time' => $next_run_time,
      '@last_run_time' => $last_run_time,
    ], WATCHDOG_DEBUG, l(t('Link Checker status'), DENNIS_LINK_CHECKER_ADMINISTRATION_PATH_ROOT));

    return;
  }

  // A run is due to take place. First, check if a run is currently underway.
  // If it is, we need to work out whether we should skip or force a run.
  if (variable_get(DENNIS_LINK_CHECKER_VARIABLE_IS_RUNNING, DENNIS_LINK_CHECKER_IS_RUNNING_DEFAULT)) {
    // Link checker is marked as running. When did we last skip a run?
    $last_run_skipped_timestamp = variable_get(DENNIS_LINK_CHECKER_VARIABLE_LAST_SKIPPED_TIME, DENNIS_LINK_CHECKER_LAST_SKIPPED_TIME_DEFAULT);
    $last_run_skipped_time = format_date($last_run_skipped_timestamp, 'medium');

    if (($last_run_skipped_timestamp + $run_interval) > REQUEST_TIME) {
      // Last skipped run was less than the run interval seconds ago, so we
      // don't need to do anything now.
      watchdog(DENNIS_LINK_CHECKER_MODULE_NAME, 'Cron: not running link checker - already running, and the last skipped run was at @last_skipped_time, which is less than the run interval @run_interval ago.', [
        '@last_skipped_time' => $last_run_skipped_time,
        '@run_interval' => _dennis_link_checker_cron_interval_options($run_interval),
      ], WATCHDOG_DEBUG, l(t('Link Checker status'), DENNIS_LINK_CHECKER_ADMINISTRATION_PATH_ROOT));

      return;
    }

    // Update the skipped timestamp to now.
    variable_set(DENNIS_LINK_CHECKER_VARIABLE_LAST_SKIPPED_TIME, REQUEST_TIME);

    // Increment the skip counter.
    $number_runs_skipped = variable_get(DENNIS_LINK_CHECKER_VARIABLE_NUMBER_RUNS_SKIPPED, DENNIS_LINK_CHECKER_NUMBER_RUNS_SKIPPED_DEFAULT);
    $number_runs_skipped++;
    variable_set(DENNIS_LINK_CHECKER_VARIABLE_NUMBER_RUNS_SKIPPED, $number_runs_skipped);

    // How man skips before we force a run?
    $force_run_after_x_skips = variable_get(DENNIS_LINK_CHECKER_VARIABLE_FORCE_RUN_AFTER_X_SKIPS, DENNIS_LINK_CHECKER_FORCE_RUN_AFTER_X_SKIPS_DEFAULT);

    // Have we skipped enough runs that we now need to force a run?
    if ($number_runs_skipped < $force_run_after_x_skips) {
      // No - return.
      watchdog(DENNIS_LINK_CHECKER_MODULE_NAME, 'Cron: not running link checker - already running. We have skipped @number_runs_skipped. We will force a run after skipping @force_run_after_x_skips. The last skipped run was at @last_skipped_time.', [
        '@number_runs_skipped' => $number_runs_skipped,
        '@force_run_after_x_skips' => $force_run_after_x_skips,
        '@last_skipped_time' => $last_run_skipped_time,
      ], WATCHDOG_DEBUG, l(t('Link Checker status'), DENNIS_LINK_CHECKER_ADMINISTRATION_PATH_ROOT));

      return;
    }
  }

  // If we made it here, link checker needs to run.
  watchdog(DENNIS_LINK_CHECKER_MODULE_NAME, 'Cron: running link checker. Last run was at @last_run_time.', [
    '@last_run_time' => $last_run_time,
  ], WATCHDOG_NOTICE, l(t('Link Checker status'), DENNIS_LINK_CHECKER_ADMINISTRATION_PATH_ROOT));

  dennis_link_checker_run();

  watchdog(DENNIS_LINK_CHECKER_MODULE_NAME, 'Cron: link checker run completed at @last_run_time.', [
    '@last_run_time' => $last_run_time,
  ], WATCHDOG_DEBUG, l(t('Link Checker status'), DENNIS_LINK_CHECKER_ADMINISTRATION_PATH_ROOT));
}

/**
 * Implements hook_theme().
 */
function dennis_link_checker_theme($existing, $type, $theme, $path) {
  $return = [];

  // The administration overview page with a button to run the link checker.
  $return[DENNIS_LINK_CHECKER_MODULE_NAME . '_overview_page'] = [
    'variables' => [], //_dennis_link_checker_last_run_statistics_default(),
    'template' => 'dennis-link-checker-admin-overview-page',
    'path' => drupal_get_path('module', DENNIS_LINK_CHECKER_MODULE_NAME) . '/templates',
  ];

  return $return;
}

/**
 * Implements hook_menu().
 */
function dennis_link_checker_menu() {
  $items = [];

  // Link checker main menu entry.
  $items[DENNIS_LINK_CHECKER_ADMINISTRATION_PATH_ROOT] = [
    'title' => 'Dennis Link Checker',
    'description' => 'The Dennis Link Checker module.',
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => [DENNIS_LINK_CHECKER_PERMISSION_ACCESS_LINK_CHECKER_OVERVIEW],
    'page callback' => DENNIS_LINK_CHECKER_MODULE_NAME . '_callback_overview_page',
    'file' => 'dennis_link_checker.admin.inc',
  ];

  // Link checker overview/run page (default menu tab).
  $items[DENNIS_LINK_CHECKER_ADMINISTRATION_PATH_ROOT . '/overview'] = [
    'title' => 'Overview',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  ];

  // Link checker config page (menu tab).
  $items[DENNIS_LINK_CHECKER_ADMINISTRATION_PATH_ROOT . '/config'] = [
    'title' => 'Configuration',
    'type' => MENU_LOCAL_TASK,
    'access arguments' => [DENNIS_LINK_CHECKER_PERMISSION_CONFIGURE_LINK_CHECKER],
    'page callback' => 'drupal_get_form',
    'page arguments' => [DENNIS_LINK_CHECKER_MODULE_NAME . '_callback_config_form'],
    'file' => 'dennis_link_checker.admin.inc',
  ];

  // Link checker run batch callback URL (callback).
  // Not needed?

  return $items;
}
